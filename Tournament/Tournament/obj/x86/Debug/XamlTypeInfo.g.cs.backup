//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace Tournament
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::Tournament.Tournament_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::Tournament.Tournament_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::Tournament.Tournament_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace Tournament.Tournament_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[34];
            _typeNameTable[0] = "Tournament.EnumerationSlider.AsWordsConverter";
            _typeNameTable[1] = "Object";
            _typeNameTable[2] = "Tournament.EnumerationSlider.EnumerationSlider";
            _typeNameTable[3] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[4] = "String";
            _typeNameTable[5] = "Tournament.ViewBase";
            _typeNameTable[6] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[7] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[8] = "Tournament.ViewModels.AddPlayerViewModel";
            _typeNameTable[9] = "Tournament.MVVM.BindableBase";
            _typeNameTable[10] = "System.Collections.ObjectModel.ObservableCollection`1<Tournament.Models.Player>";
            _typeNameTable[11] = "System.Collections.ObjectModel.Collection`1<Tournament.Models.Player>";
            _typeNameTable[12] = "Tournament.Models.Player";
            _typeNameTable[13] = "Int32";
            _typeNameTable[14] = "System.Windows.Input.ICommand";
            _typeNameTable[15] = "Tournament.AddPlayers";
            _typeNameTable[16] = "Tournament.MVVM.BooleanNegationConverter";
            _typeNameTable[17] = "Tournament.MVVM.BooleanToVisibilityConverter";
            _typeNameTable[18] = "Boolean";
            _typeNameTable[19] = "Tournament.ViewModels.MainPageViewModel";
            _typeNameTable[20] = "Tournament.ViewModels.ViewModelBase";
            _typeNameTable[21] = "System.Collections.ObjectModel.ObservableCollection`1<Tournament.ViewModels.TournamentViewModel>";
            _typeNameTable[22] = "System.Collections.ObjectModel.Collection`1<Tournament.ViewModels.TournamentViewModel>";
            _typeNameTable[23] = "Tournament.ViewModels.TournamentViewModel";
            _typeNameTable[24] = "Tournament.Models.Tournament";
            _typeNameTable[25] = "Windows.UI.Xaml.Media.ImageSource";
            _typeNameTable[26] = "Byte[]";
            _typeNameTable[27] = "System.Array";
            _typeNameTable[28] = "Byte";
            _typeNameTable[29] = "System.ValueType";
            _typeNameTable[30] = "Tournament.ViewModels.Status";
            _typeNameTable[31] = "System.Enum";
            _typeNameTable[32] = "Tournament.INavigationService";
            _typeNameTable[33] = "Tournament.MainPage";

            _typeTable = new global::System.Type[34];
            _typeTable[0] = typeof(global::Tournament.EnumerationSlider.AsWordsConverter);
            _typeTable[1] = typeof(global::System.Object);
            _typeTable[2] = typeof(global::Tournament.EnumerationSlider.EnumerationSlider);
            _typeTable[3] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[4] = typeof(global::System.String);
            _typeTable[5] = typeof(global::Tournament.ViewBase);
            _typeTable[6] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[7] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[8] = typeof(global::Tournament.ViewModels.AddPlayerViewModel);
            _typeTable[9] = typeof(global::Tournament.MVVM.BindableBase);
            _typeTable[10] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Tournament.Models.Player>);
            _typeTable[11] = typeof(global::System.Collections.ObjectModel.Collection<global::Tournament.Models.Player>);
            _typeTable[12] = typeof(global::Tournament.Models.Player);
            _typeTable[13] = typeof(global::System.Int32);
            _typeTable[14] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[15] = typeof(global::Tournament.AddPlayers);
            _typeTable[16] = typeof(global::Tournament.MVVM.BooleanNegationConverter);
            _typeTable[17] = typeof(global::Tournament.MVVM.BooleanToVisibilityConverter);
            _typeTable[18] = typeof(global::System.Boolean);
            _typeTable[19] = typeof(global::Tournament.ViewModels.MainPageViewModel);
            _typeTable[20] = typeof(global::Tournament.ViewModels.ViewModelBase);
            _typeTable[21] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Tournament.ViewModels.TournamentViewModel>);
            _typeTable[22] = typeof(global::System.Collections.ObjectModel.Collection<global::Tournament.ViewModels.TournamentViewModel>);
            _typeTable[23] = typeof(global::Tournament.ViewModels.TournamentViewModel);
            _typeTable[24] = typeof(global::Tournament.Models.Tournament);
            _typeTable[25] = typeof(global::Windows.UI.Xaml.Media.ImageSource);
            _typeTable[26] = typeof(global::System.Byte[]);
            _typeTable[27] = typeof(global::System.Array);
            _typeTable[28] = typeof(global::System.Byte);
            _typeTable[29] = typeof(global::System.ValueType);
            _typeTable[30] = typeof(global::Tournament.ViewModels.Status);
            _typeTable[31] = typeof(global::System.Enum);
            _typeTable[32] = typeof(global::Tournament.INavigationService);
            _typeTable[33] = typeof(global::Tournament.MainPage);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_AsWordsConverter() { return new global::Tournament.EnumerationSlider.AsWordsConverter(); }
        private object Activate_2_EnumerationSlider() { return new global::Tournament.EnumerationSlider.EnumerationSlider(); }
        private object Activate_5_ViewBase() { return new global::Tournament.ViewBase(); }
        private object Activate_8_AddPlayerViewModel() { return new global::Tournament.ViewModels.AddPlayerViewModel(); }
        private object Activate_10_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Tournament.Models.Player>(); }
        private object Activate_11_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Tournament.Models.Player>(); }
        private object Activate_12_Player() { return new global::Tournament.Models.Player(); }
        private object Activate_15_AddPlayers() { return new global::Tournament.AddPlayers(); }
        private object Activate_16_BooleanNegationConverter() { return new global::Tournament.MVVM.BooleanNegationConverter(); }
        private object Activate_17_BooleanToVisibilityConverter() { return new global::Tournament.MVVM.BooleanToVisibilityConverter(); }
        private object Activate_19_MainPageViewModel() { return new global::Tournament.ViewModels.MainPageViewModel(); }
        private object Activate_20_ViewModelBase() { return new global::Tournament.ViewModels.ViewModelBase(); }
        private object Activate_21_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Tournament.ViewModels.TournamentViewModel>(); }
        private object Activate_22_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Tournament.ViewModels.TournamentViewModel>(); }
        private object Activate_24_Tournament() { return new global::Tournament.Models.Tournament(); }
        private object Activate_33_MainPage() { return new global::Tournament.MainPage(); }
        private void VectorAdd_10_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Tournament.Models.Player>)instance;
            var newItem = (global::Tournament.Models.Player)item;
            collection.Add(newItem);
        }
        private void VectorAdd_11_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Tournament.Models.Player>)instance;
            var newItem = (global::Tournament.Models.Player)item;
            collection.Add(newItem);
        }
        private void VectorAdd_21_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Tournament.ViewModels.TournamentViewModel>)instance;
            var newItem = (global::Tournament.ViewModels.TournamentViewModel)item;
            collection.Add(newItem);
        }
        private void VectorAdd_22_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Tournament.ViewModels.TournamentViewModel>)instance;
            var newItem = (global::Tournament.ViewModels.TournamentViewModel)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::Tournament.Tournament_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::Tournament.Tournament_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Tournament.EnumerationSlider.AsWordsConverter
                userType = new global::Tournament.Tournament_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_0_AsWordsConverter;
                xamlType = userType;
                break;

            case 1:   //  Object
                xamlType = new global::Tournament.Tournament_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Tournament.EnumerationSlider.EnumerationSlider
                userType = new global::Tournament.Tournament_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_2_EnumerationSlider;
                userType.AddMemberName("Enumeration");
                userType.AddMemberName("Value");
                xamlType = userType;
                break;

            case 3:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::Tournament.Tournament_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  String
                xamlType = new global::Tournament.Tournament_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  Tournament.ViewBase
                userType = new global::Tournament.Tournament_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_5_ViewBase;
                userType.AddMemberName("DataContextChangedWatcher");
                xamlType = userType;
                break;

            case 6:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::Tournament.Tournament_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 7:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::Tournament.Tournament_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 8:   //  Tournament.ViewModels.AddPlayerViewModel
                userType = new global::Tournament.Tournament_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Tournament.MVVM.BindableBase"));
                userType.Activator = Activate_8_AddPlayerViewModel;
                userType.AddMemberName("Players");
                userType.AddMemberName("PlayerName");
                userType.AddMemberName("GetPlayersCommand");
                userType.AddMemberName("InsertPlayerCommand");
                xamlType = userType;
                break;

            case 9:   //  Tournament.MVVM.BindableBase
                userType = new global::Tournament.Tournament_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 10:   //  System.Collections.ObjectModel.ObservableCollection`1<Tournament.Models.Player>
                userType = new global::Tournament.Tournament_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Tournament.Models.Player>"));
                userType.CollectionAdd = VectorAdd_10_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 11:   //  System.Collections.ObjectModel.Collection`1<Tournament.Models.Player>
                userType = new global::Tournament.Tournament_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_11_Collection;
                userType.CollectionAdd = VectorAdd_11_Collection;
                xamlType = userType;
                break;

            case 12:   //  Tournament.Models.Player
                userType = new global::Tournament.Tournament_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_12_Player;
                userType.AddMemberName("PlayerId");
                userType.AddMemberName("Name");
                userType.AddMemberName("TournamentId");
                xamlType = userType;
                break;

            case 13:   //  Int32
                xamlType = new global::Tournament.Tournament_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 14:   //  System.Windows.Input.ICommand
                userType = new global::Tournament.Tournament_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 15:   //  Tournament.AddPlayers
                userType = new global::Tournament.Tournament_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Tournament.ViewBase"));
                userType.Activator = Activate_15_AddPlayers;
                xamlType = userType;
                break;

            case 16:   //  Tournament.MVVM.BooleanNegationConverter
                userType = new global::Tournament.Tournament_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_16_BooleanNegationConverter;
                xamlType = userType;
                break;

            case 17:   //  Tournament.MVVM.BooleanToVisibilityConverter
                userType = new global::Tournament.Tournament_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_17_BooleanToVisibilityConverter;
                userType.AddMemberName("IsReversed");
                xamlType = userType;
                break;

            case 18:   //  Boolean
                xamlType = new global::Tournament.Tournament_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  Tournament.ViewModels.MainPageViewModel
                userType = new global::Tournament.Tournament_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Tournament.ViewModels.ViewModelBase"));
                userType.Activator = Activate_19_MainPageViewModel;
                userType.AddMemberName("EditCommand");
                userType.AddMemberName("IsInDesignMode");
                userType.AddMemberName("IsInEditMode");
                userType.AddMemberName("SelectCommand");
                userType.AddMemberName("CancelCommand");
                userType.AddMemberName("CreateCommand");
                userType.AddMemberName("DeleteCommand");
                userType.AddMemberName("NewCommand");
                userType.AddMemberName("SaveCommand");
                userType.AddMemberName("AddPlayersCommand");
                userType.AddMemberName("IsNewCreated");
                userType.AddMemberName("HasSelection");
                userType.AddMemberName("Tournaments");
                userType.AddMemberName("SelectedTournament");
                xamlType = userType;
                break;

            case 20:   //  Tournament.ViewModels.ViewModelBase
                userType = new global::Tournament.Tournament_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Tournament.MVVM.BindableBase"));
                userType.Activator = Activate_20_ViewModelBase;
                userType.AddMemberName("NavigationService");
                userType.AddMemberName("CanGoBack");
                userType.AddMemberName("CanGoForward");
                xamlType = userType;
                break;

            case 21:   //  System.Collections.ObjectModel.ObservableCollection`1<Tournament.ViewModels.TournamentViewModel>
                userType = new global::Tournament.Tournament_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Tournament.ViewModels.TournamentViewModel>"));
                userType.CollectionAdd = VectorAdd_21_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 22:   //  System.Collections.ObjectModel.Collection`1<Tournament.ViewModels.TournamentViewModel>
                userType = new global::Tournament.Tournament_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_22_Collection;
                userType.CollectionAdd = VectorAdd_22_Collection;
                xamlType = userType;
                break;

            case 23:   //  Tournament.ViewModels.TournamentViewModel
                userType = new global::Tournament.Tournament_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Tournament.ViewModels.ViewModelBase"));
                userType.AddMemberName("Description");
                userType.AddMemberName("Type");
                userType.AddMemberName("Id");
                userType.AddMemberName("Model");
                userType.AddMemberName("Name");
                userType.AddMemberName("ImageSource");
                userType.AddMemberName("Picture");
                userType.AddMemberName("Status");
                userType.AddMemberName("StatusString");
                userType.AddMemberName("UploadImageCommand");
                xamlType = userType;
                break;

            case 24:   //  Tournament.Models.Tournament
                userType = new global::Tournament.Tournament_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 25:   //  Windows.UI.Xaml.Media.ImageSource
                xamlType = new global::Tournament.Tournament_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 26:   //  Byte[]
                userType = new global::Tournament.Tournament_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Array"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 27:   //  System.Array
                userType = new global::Tournament.Tournament_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 28:   //  Byte
                userType = new global::Tournament.Tournament_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 29:   //  System.ValueType
                userType = new global::Tournament.Tournament_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 30:   //  Tournament.ViewModels.Status
                userType = new global::Tournament.Tournament_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Planned", global::Tournament.ViewModels.Status.Planned);
                userType.AddEnumValue("Playing", global::Tournament.ViewModels.Status.Playing);
                userType.AddEnumValue("Finished", global::Tournament.ViewModels.Status.Finished);
                xamlType = userType;
                break;

            case 31:   //  System.Enum
                userType = new global::Tournament.Tournament_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 32:   //  Tournament.INavigationService
                userType = new global::Tournament.Tournament_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 33:   //  Tournament.MainPage
                userType = new global::Tournament.Tournament_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Tournament.ViewBase"));
                userType.Activator = Activate_33_MainPage;
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private object get_0_EnumerationSlider_Enumeration(object instance)
        {
            var that = (global::Tournament.EnumerationSlider.EnumerationSlider)instance;
            return that.Enumeration;
        }
        private void set_0_EnumerationSlider_Enumeration(object instance, object Value)
        {
            var that = (global::Tournament.EnumerationSlider.EnumerationSlider)instance;
            that.Enumeration = (global::System.String)Value;
        }
        private object get_1_EnumerationSlider_Value(object instance)
        {
            var that = (global::Tournament.EnumerationSlider.EnumerationSlider)instance;
            return that.Value;
        }
        private void set_1_EnumerationSlider_Value(object instance, object Value)
        {
            var that = (global::Tournament.EnumerationSlider.EnumerationSlider)instance;
            that.Value = (global::System.String)Value;
        }
        private object get_2_ViewBase_DataContextChangedWatcher(object instance)
        {
            var that = (global::Tournament.ViewBase)instance;
            return that.DataContextChangedWatcher;
        }
        private void set_2_ViewBase_DataContextChangedWatcher(object instance, object Value)
        {
            var that = (global::Tournament.ViewBase)instance;
            that.DataContextChangedWatcher = (global::System.Object)Value;
        }
        private object get_3_AddPlayerViewModel_Players(object instance)
        {
            var that = (global::Tournament.ViewModels.AddPlayerViewModel)instance;
            return that.Players;
        }
        private object get_4_Player_PlayerId(object instance)
        {
            var that = (global::Tournament.Models.Player)instance;
            return that.PlayerId;
        }
        private void set_4_Player_PlayerId(object instance, object Value)
        {
            var that = (global::Tournament.Models.Player)instance;
            that.PlayerId = (global::System.Int32)Value;
        }
        private object get_5_Player_Name(object instance)
        {
            var that = (global::Tournament.Models.Player)instance;
            return that.Name;
        }
        private void set_5_Player_Name(object instance, object Value)
        {
            var that = (global::Tournament.Models.Player)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_6_Player_TournamentId(object instance)
        {
            var that = (global::Tournament.Models.Player)instance;
            return that.TournamentId;
        }
        private void set_6_Player_TournamentId(object instance, object Value)
        {
            var that = (global::Tournament.Models.Player)instance;
            that.TournamentId = (global::System.Int32)Value;
        }
        private object get_7_AddPlayerViewModel_PlayerName(object instance)
        {
            var that = (global::Tournament.ViewModels.AddPlayerViewModel)instance;
            return that.PlayerName;
        }
        private void set_7_AddPlayerViewModel_PlayerName(object instance, object Value)
        {
            var that = (global::Tournament.ViewModels.AddPlayerViewModel)instance;
            that.PlayerName = (global::System.String)Value;
        }
        private object get_8_AddPlayerViewModel_GetPlayersCommand(object instance)
        {
            var that = (global::Tournament.ViewModels.AddPlayerViewModel)instance;
            return that.GetPlayersCommand;
        }
        private object get_9_AddPlayerViewModel_InsertPlayerCommand(object instance)
        {
            var that = (global::Tournament.ViewModels.AddPlayerViewModel)instance;
            return that.InsertPlayerCommand;
        }
        private object get_10_BooleanToVisibilityConverter_IsReversed(object instance)
        {
            var that = (global::Tournament.MVVM.BooleanToVisibilityConverter)instance;
            return that.IsReversed;
        }
        private void set_10_BooleanToVisibilityConverter_IsReversed(object instance, object Value)
        {
            var that = (global::Tournament.MVVM.BooleanToVisibilityConverter)instance;
            that.IsReversed = (global::System.Boolean)Value;
        }
        private object get_11_MainPageViewModel_EditCommand(object instance)
        {
            var that = (global::Tournament.ViewModels.MainPageViewModel)instance;
            return that.EditCommand;
        }
        private object get_12_MainPageViewModel_IsInDesignMode(object instance)
        {
            var that = (global::Tournament.ViewModels.MainPageViewModel)instance;
            return that.IsInDesignMode;
        }
        private object get_13_MainPageViewModel_IsInEditMode(object instance)
        {
            var that = (global::Tournament.ViewModels.MainPageViewModel)instance;
            return that.IsInEditMode;
        }
        private void set_13_MainPageViewModel_IsInEditMode(object instance, object Value)
        {
            var that = (global::Tournament.ViewModels.MainPageViewModel)instance;
            that.IsInEditMode = (global::System.Boolean)Value;
        }
        private object get_14_MainPageViewModel_SelectCommand(object instance)
        {
            var that = (global::Tournament.ViewModels.MainPageViewModel)instance;
            return that.SelectCommand;
        }
        private object get_15_MainPageViewModel_CancelCommand(object instance)
        {
            var that = (global::Tournament.ViewModels.MainPageViewModel)instance;
            return that.CancelCommand;
        }
        private object get_16_MainPageViewModel_CreateCommand(object instance)
        {
            var that = (global::Tournament.ViewModels.MainPageViewModel)instance;
            return that.CreateCommand;
        }
        private object get_17_MainPageViewModel_DeleteCommand(object instance)
        {
            var that = (global::Tournament.ViewModels.MainPageViewModel)instance;
            return that.DeleteCommand;
        }
        private object get_18_MainPageViewModel_NewCommand(object instance)
        {
            var that = (global::Tournament.ViewModels.MainPageViewModel)instance;
            return that.NewCommand;
        }
        private object get_19_MainPageViewModel_SaveCommand(object instance)
        {
            var that = (global::Tournament.ViewModels.MainPageViewModel)instance;
            return that.SaveCommand;
        }
        private object get_20_MainPageViewModel_AddPlayersCommand(object instance)
        {
            var that = (global::Tournament.ViewModels.MainPageViewModel)instance;
            return that.AddPlayersCommand;
        }
        private object get_21_MainPageViewModel_IsNewCreated(object instance)
        {
            var that = (global::Tournament.ViewModels.MainPageViewModel)instance;
            return that.IsNewCreated;
        }
        private object get_22_MainPageViewModel_HasSelection(object instance)
        {
            var that = (global::Tournament.ViewModels.MainPageViewModel)instance;
            return that.HasSelection;
        }
        private object get_23_MainPageViewModel_Tournaments(object instance)
        {
            var that = (global::Tournament.ViewModels.MainPageViewModel)instance;
            return that.Tournaments;
        }
        private void set_23_MainPageViewModel_Tournaments(object instance, object Value)
        {
            var that = (global::Tournament.ViewModels.MainPageViewModel)instance;
            that.Tournaments = (global::System.Collections.ObjectModel.ObservableCollection<global::Tournament.ViewModels.TournamentViewModel>)Value;
        }
        private object get_24_TournamentViewModel_Description(object instance)
        {
            var that = (global::Tournament.ViewModels.TournamentViewModel)instance;
            return that.Description;
        }
        private void set_24_TournamentViewModel_Description(object instance, object Value)
        {
            var that = (global::Tournament.ViewModels.TournamentViewModel)instance;
            that.Description = (global::System.String)Value;
        }
        private object get_25_TournamentViewModel_Type(object instance)
        {
            var that = (global::Tournament.ViewModels.TournamentViewModel)instance;
            return that.Type;
        }
        private void set_25_TournamentViewModel_Type(object instance, object Value)
        {
            var that = (global::Tournament.ViewModels.TournamentViewModel)instance;
            that.Type = (global::System.String)Value;
        }
        private object get_26_TournamentViewModel_Id(object instance)
        {
            var that = (global::Tournament.ViewModels.TournamentViewModel)instance;
            return that.Id;
        }
        private void set_26_TournamentViewModel_Id(object instance, object Value)
        {
            var that = (global::Tournament.ViewModels.TournamentViewModel)instance;
            that.Id = (global::System.Int32)Value;
        }
        private object get_27_TournamentViewModel_Model(object instance)
        {
            var that = (global::Tournament.ViewModels.TournamentViewModel)instance;
            return that.Model;
        }
        private void set_27_TournamentViewModel_Model(object instance, object Value)
        {
            var that = (global::Tournament.ViewModels.TournamentViewModel)instance;
            that.Model = (global::Tournament.Models.Tournament)Value;
        }
        private object get_28_TournamentViewModel_Name(object instance)
        {
            var that = (global::Tournament.ViewModels.TournamentViewModel)instance;
            return that.Name;
        }
        private void set_28_TournamentViewModel_Name(object instance, object Value)
        {
            var that = (global::Tournament.ViewModels.TournamentViewModel)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_29_TournamentViewModel_ImageSource(object instance)
        {
            var that = (global::Tournament.ViewModels.TournamentViewModel)instance;
            return that.ImageSource;
        }
        private void set_30_TournamentViewModel_Picture(object instance, object Value)
        {
            var that = (global::Tournament.ViewModels.TournamentViewModel)instance;
            that.Picture = (global::System.Byte[])Value;
        }
        private object get_31_TournamentViewModel_Status(object instance)
        {
            var that = (global::Tournament.ViewModels.TournamentViewModel)instance;
            return that.Status;
        }
        private void set_31_TournamentViewModel_Status(object instance, object Value)
        {
            var that = (global::Tournament.ViewModels.TournamentViewModel)instance;
            that.Status = (global::Tournament.ViewModels.Status)Value;
        }
        private object get_32_TournamentViewModel_StatusString(object instance)
        {
            var that = (global::Tournament.ViewModels.TournamentViewModel)instance;
            return that.StatusString;
        }
        private void set_32_TournamentViewModel_StatusString(object instance, object Value)
        {
            var that = (global::Tournament.ViewModels.TournamentViewModel)instance;
            that.StatusString = (global::System.String)Value;
        }
        private object get_33_TournamentViewModel_UploadImageCommand(object instance)
        {
            var that = (global::Tournament.ViewModels.TournamentViewModel)instance;
            return that.UploadImageCommand;
        }
        private object get_34_ViewModelBase_NavigationService(object instance)
        {
            var that = (global::Tournament.ViewModels.ViewModelBase)instance;
            return that.NavigationService;
        }
        private void set_34_ViewModelBase_NavigationService(object instance, object Value)
        {
            var that = (global::Tournament.ViewModels.ViewModelBase)instance;
            that.NavigationService = (global::Tournament.INavigationService)Value;
        }
        private object get_35_ViewModelBase_CanGoBack(object instance)
        {
            var that = (global::Tournament.ViewModels.ViewModelBase)instance;
            return that.CanGoBack;
        }
        private object get_36_ViewModelBase_CanGoForward(object instance)
        {
            var that = (global::Tournament.ViewModels.ViewModelBase)instance;
            return that.CanGoForward;
        }
        private object get_37_MainPageViewModel_SelectedTournament(object instance)
        {
            var that = (global::Tournament.ViewModels.MainPageViewModel)instance;
            return that.SelectedTournament;
        }
        private void set_37_MainPageViewModel_SelectedTournament(object instance, object Value)
        {
            var that = (global::Tournament.ViewModels.MainPageViewModel)instance;
            that.SelectedTournament = (global::Tournament.ViewModels.TournamentViewModel)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::Tournament.Tournament_XamlTypeInfo.XamlMember xamlMember = null;
            global::Tournament.Tournament_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Tournament.EnumerationSlider.EnumerationSlider.Enumeration":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.EnumerationSlider.EnumerationSlider");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "Enumeration", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_EnumerationSlider_Enumeration;
                xamlMember.Setter = set_0_EnumerationSlider_Enumeration;
                break;
            case "Tournament.EnumerationSlider.EnumerationSlider.Value":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.EnumerationSlider.EnumerationSlider");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "Value", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_EnumerationSlider_Value;
                xamlMember.Setter = set_1_EnumerationSlider_Value;
                break;
            case "Tournament.ViewBase.DataContextChangedWatcher":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.ViewBase");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "DataContextChangedWatcher", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_ViewBase_DataContextChangedWatcher;
                xamlMember.Setter = set_2_ViewBase_DataContextChangedWatcher;
                break;
            case "Tournament.ViewModels.AddPlayerViewModel.Players":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.ViewModels.AddPlayerViewModel");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "Players", "System.Collections.ObjectModel.ObservableCollection`1<Tournament.Models.Player>");
                xamlMember.Getter = get_3_AddPlayerViewModel_Players;
                xamlMember.SetIsReadOnly();
                break;
            case "Tournament.Models.Player.PlayerId":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.Models.Player");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "PlayerId", "Int32");
                xamlMember.Getter = get_4_Player_PlayerId;
                xamlMember.Setter = set_4_Player_PlayerId;
                break;
            case "Tournament.Models.Player.Name":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.Models.Player");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_5_Player_Name;
                xamlMember.Setter = set_5_Player_Name;
                break;
            case "Tournament.Models.Player.TournamentId":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.Models.Player");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "TournamentId", "Int32");
                xamlMember.Getter = get_6_Player_TournamentId;
                xamlMember.Setter = set_6_Player_TournamentId;
                break;
            case "Tournament.ViewModels.AddPlayerViewModel.PlayerName":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.ViewModels.AddPlayerViewModel");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "PlayerName", "String");
                xamlMember.Getter = get_7_AddPlayerViewModel_PlayerName;
                xamlMember.Setter = set_7_AddPlayerViewModel_PlayerName;
                break;
            case "Tournament.ViewModels.AddPlayerViewModel.GetPlayersCommand":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.ViewModels.AddPlayerViewModel");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "GetPlayersCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_8_AddPlayerViewModel_GetPlayersCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Tournament.ViewModels.AddPlayerViewModel.InsertPlayerCommand":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.ViewModels.AddPlayerViewModel");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "InsertPlayerCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_9_AddPlayerViewModel_InsertPlayerCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Tournament.MVVM.BooleanToVisibilityConverter.IsReversed":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.MVVM.BooleanToVisibilityConverter");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "IsReversed", "Boolean");
                xamlMember.Getter = get_10_BooleanToVisibilityConverter_IsReversed;
                xamlMember.Setter = set_10_BooleanToVisibilityConverter_IsReversed;
                break;
            case "Tournament.ViewModels.MainPageViewModel.EditCommand":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.ViewModels.MainPageViewModel");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "EditCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_11_MainPageViewModel_EditCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Tournament.ViewModels.MainPageViewModel.IsInDesignMode":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.ViewModels.MainPageViewModel");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "IsInDesignMode", "Boolean");
                xamlMember.Getter = get_12_MainPageViewModel_IsInDesignMode;
                xamlMember.SetIsReadOnly();
                break;
            case "Tournament.ViewModels.MainPageViewModel.IsInEditMode":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.ViewModels.MainPageViewModel");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "IsInEditMode", "Boolean");
                xamlMember.Getter = get_13_MainPageViewModel_IsInEditMode;
                xamlMember.Setter = set_13_MainPageViewModel_IsInEditMode;
                break;
            case "Tournament.ViewModels.MainPageViewModel.SelectCommand":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.ViewModels.MainPageViewModel");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "SelectCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_14_MainPageViewModel_SelectCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Tournament.ViewModels.MainPageViewModel.CancelCommand":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.ViewModels.MainPageViewModel");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "CancelCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_15_MainPageViewModel_CancelCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Tournament.ViewModels.MainPageViewModel.CreateCommand":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.ViewModels.MainPageViewModel");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "CreateCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_16_MainPageViewModel_CreateCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Tournament.ViewModels.MainPageViewModel.DeleteCommand":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.ViewModels.MainPageViewModel");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "DeleteCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_17_MainPageViewModel_DeleteCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Tournament.ViewModels.MainPageViewModel.NewCommand":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.ViewModels.MainPageViewModel");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "NewCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_18_MainPageViewModel_NewCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Tournament.ViewModels.MainPageViewModel.SaveCommand":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.ViewModels.MainPageViewModel");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "SaveCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_19_MainPageViewModel_SaveCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Tournament.ViewModels.MainPageViewModel.AddPlayersCommand":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.ViewModels.MainPageViewModel");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "AddPlayersCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_20_MainPageViewModel_AddPlayersCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Tournament.ViewModels.MainPageViewModel.IsNewCreated":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.ViewModels.MainPageViewModel");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "IsNewCreated", "Boolean");
                xamlMember.Getter = get_21_MainPageViewModel_IsNewCreated;
                xamlMember.SetIsReadOnly();
                break;
            case "Tournament.ViewModels.MainPageViewModel.HasSelection":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.ViewModels.MainPageViewModel");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "HasSelection", "Boolean");
                xamlMember.Getter = get_22_MainPageViewModel_HasSelection;
                xamlMember.SetIsReadOnly();
                break;
            case "Tournament.ViewModels.MainPageViewModel.Tournaments":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.ViewModels.MainPageViewModel");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "Tournaments", "System.Collections.ObjectModel.ObservableCollection`1<Tournament.ViewModels.TournamentViewModel>");
                xamlMember.Getter = get_23_MainPageViewModel_Tournaments;
                xamlMember.Setter = set_23_MainPageViewModel_Tournaments;
                break;
            case "Tournament.ViewModels.TournamentViewModel.Description":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.ViewModels.TournamentViewModel");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "Description", "String");
                xamlMember.Getter = get_24_TournamentViewModel_Description;
                xamlMember.Setter = set_24_TournamentViewModel_Description;
                break;
            case "Tournament.ViewModels.TournamentViewModel.Type":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.ViewModels.TournamentViewModel");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "Type", "String");
                xamlMember.Getter = get_25_TournamentViewModel_Type;
                xamlMember.Setter = set_25_TournamentViewModel_Type;
                break;
            case "Tournament.ViewModels.TournamentViewModel.Id":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.ViewModels.TournamentViewModel");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "Id", "Int32");
                xamlMember.Getter = get_26_TournamentViewModel_Id;
                xamlMember.Setter = set_26_TournamentViewModel_Id;
                break;
            case "Tournament.ViewModels.TournamentViewModel.Model":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.ViewModels.TournamentViewModel");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "Model", "Tournament.Models.Tournament");
                xamlMember.Getter = get_27_TournamentViewModel_Model;
                xamlMember.Setter = set_27_TournamentViewModel_Model;
                break;
            case "Tournament.ViewModels.TournamentViewModel.Name":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.ViewModels.TournamentViewModel");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_28_TournamentViewModel_Name;
                xamlMember.Setter = set_28_TournamentViewModel_Name;
                break;
            case "Tournament.ViewModels.TournamentViewModel.ImageSource":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.ViewModels.TournamentViewModel");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "ImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.Getter = get_29_TournamentViewModel_ImageSource;
                xamlMember.SetIsReadOnly();
                break;
            case "Tournament.ViewModels.TournamentViewModel.Picture":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.ViewModels.TournamentViewModel");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "Picture", "Byte[]");
                xamlMember.Setter = set_30_TournamentViewModel_Picture;
                break;
            case "Tournament.ViewModels.TournamentViewModel.Status":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.ViewModels.TournamentViewModel");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "Status", "Tournament.ViewModels.Status");
                xamlMember.Getter = get_31_TournamentViewModel_Status;
                xamlMember.Setter = set_31_TournamentViewModel_Status;
                break;
            case "Tournament.ViewModels.TournamentViewModel.StatusString":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.ViewModels.TournamentViewModel");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "StatusString", "String");
                xamlMember.Getter = get_32_TournamentViewModel_StatusString;
                xamlMember.Setter = set_32_TournamentViewModel_StatusString;
                break;
            case "Tournament.ViewModels.TournamentViewModel.UploadImageCommand":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.ViewModels.TournamentViewModel");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "UploadImageCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_33_TournamentViewModel_UploadImageCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Tournament.ViewModels.ViewModelBase.NavigationService":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.ViewModels.ViewModelBase");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "NavigationService", "Tournament.INavigationService");
                xamlMember.Getter = get_34_ViewModelBase_NavigationService;
                xamlMember.Setter = set_34_ViewModelBase_NavigationService;
                break;
            case "Tournament.ViewModels.ViewModelBase.CanGoBack":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.ViewModels.ViewModelBase");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "CanGoBack", "Boolean");
                xamlMember.Getter = get_35_ViewModelBase_CanGoBack;
                xamlMember.SetIsReadOnly();
                break;
            case "Tournament.ViewModels.ViewModelBase.CanGoForward":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.ViewModels.ViewModelBase");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "CanGoForward", "Boolean");
                xamlMember.Getter = get_36_ViewModelBase_CanGoForward;
                xamlMember.SetIsReadOnly();
                break;
            case "Tournament.ViewModels.MainPageViewModel.SelectedTournament":
                userType = (global::Tournament.Tournament_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Tournament.ViewModels.MainPageViewModel");
                xamlMember = new global::Tournament.Tournament_XamlTypeInfo.XamlMember(this, "SelectedTournament", "Tournament.ViewModels.TournamentViewModel");
                xamlMember.Getter = get_37_MainPageViewModel_SelectedTournament;
                xamlMember.Setter = set_37_MainPageViewModel_SelectedTournament;
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::Tournament.Tournament_XamlTypeInfo.XamlSystemBaseType
    {
        global::Tournament.Tournament_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::Tournament.Tournament_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::Tournament.Tournament_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::Tournament.Tournament_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


